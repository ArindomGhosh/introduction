import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

group = 'com.github.rubengees'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    dexOptions {
        preDexLibraries !isCI()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.version

        vectorDrawables.useSupportLibrary = true
        consumerProguardFiles 'proguard-rules.pro'
    }
}

dependencies {
    api deps.supportAppCompat
}

task javadoc(type: Javadoc) {
    failOnError false

    source = android.sourceSets.main.java.sourceFiles
    classpath = files(android.bootClasspath)

    android.libraryVariants.all { variant ->
        classpath += variant.javaCompiler.classpath
    }

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.links("http://docs.oracle.com/javase/${Jvm.current().javaVersion.majorVersion ?: '7'}/docs/api/")
    options.linksOffline("http://d.android.com/reference/", "${android.getSdkDirectory()}/docs/reference")

    exclude '**/R.java'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.getDestinationDir()
}

afterEvaluate {
    generateReleaseBuildConfig.enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bundleRelease

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST

                    name 'Introduction'
                    description 'An Android library to show an intro to your users.'
                    url 'https://github.com/rubengees/introduction'

                    scm {
                        url 'https://github.com/rubengees/introduction'
                        connection 'scm:git:https://github.com/rubengees/introduction'
                        developerConnection 'scm:git:git@github.com/rubengees/introduction'
                        tag 'HEAD'
                    }

                    issueManagement {
                        system 'GitHub Issues'
                        url 'https://github.com/rubengees/introduction/issues'
                    }

                    licenses {
                        license {
                            name 'MIT'
                            url 'https://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }

                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each {
                    if (it.group != null && (it.name != null || it.name == "unspecified") && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')

                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
